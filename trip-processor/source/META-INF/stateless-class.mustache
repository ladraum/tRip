package {{packageName}};

{{#serviceIdentificationName}}
@trip.spi.Singleton( name="{{.}}", exposedAs={{{typeCanonicalName}}}.class )
{{/serviceIdentificationName}}
{{^serviceIdentificationName}}
@trip.spi.Singleton( exposedAs={{typeCanonicalName}}.class )
{{/serviceIdentificationName}}
@trip.spi.GeneratedFromStatelessService
public class {{typeName}}Stateless{{identifaction}}
{{#exposedByClass}}
	extends {{{typeCanonicalName}}} {
{{/exposedByClass}}
{{^exposedByClass}}
	extends {{{implementationCanonicalName}}} implements {{{typeCanonicalName}}} {
{{/exposedByClass}}

	@trip.spi.Provided trip.spi.ServiceProvider provider;
	{{#exposedMethods}}

	public {{{returnType}}} {{name}}( {{{parametersWithTypesAsString}}} ) {
		try {
			final {{{implementationCanonicalName}}} instance = newInstance();
			postConstruct{{typeName}}{{identifaction}}( instance );
			try {
				{{#returnable}}
				final {{{returnType}}} returnValue = instance.{{name}}( {{parametersAsString}} );
				return returnValue;
				{{/returnable}}
				{{^returnable}}
				instance.{{name}}( {{parametersAsString}} );
				{{/returnable}}
			} finally {
				preDestroy{{typeName}}{{identifaction}}( instance );
			}
		} catch ( Throwable cause ) {
			throw new RuntimeException( cause );
		}
	}
	{{/exposedMethods}}

	{{{implementationCanonicalName}}} newInstance() throws trip.spi.ServiceProviderException {
		final {{{implementationCanonicalName}}} instance = new {{{implementationCanonicalName}}}();
		provider.provideOn( instance );
		return instance;
	}
	
	void postConstruct{{typeName}}{{identifaction}}(
			final {{{implementationCanonicalName}}} instance ) throws Throwable {
		{{#postConstructMethods}}
		instance.{{name}}();
		{{/postConstructMethods}}
	}
	
	void preDestroy{{typeName}}{{identifaction}}(
			final {{{implementationCanonicalName}}} instance ) throws Throwable {
		{{#preDestroyMethods}}
		instance.{{name}}();
		{{/preDestroyMethods}}
	}
}